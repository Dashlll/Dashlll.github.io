<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mongodb安装与基本使用</title>
      <link href="/2022/11/14/mongodb-an-zhuang-yu-ji-ben-shi-yong/"/>
      <url>/2022/11/14/mongodb-an-zhuang-yu-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1. 下载安装"></a>1. 下载安装</h2><p> MongoDB 一个明显的优点就是安装使用比较方便，基本不用做过多的配置。  </p><p>下载地址：</p><p> <a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a>  </p><p><img src="https://gitee.com/yxx_xxy/Images/raw/master/bigData_Nosql/image-20221114124729218.png" alt="image-20221114124729218"></p><p>在 Windows 下安装完成，只需要简单的配置一下就可以使用。  </p><p>安装的时候，建议不要安装在 C 盘，假设安装在 D:\mongodb\。</p><p><img src="https://gitee.com/yxx_xxy/Images/raw/master/bigData_Nosql/image-20221114232858684.png" alt="image-20221114232858684"></p><p><img src="https://gitee.com/yxx_xxy/Images/raw/master/bigData_Nosql/image-20221114232825979.png" alt="image-20221114232825979"></p><p><img src="https://gitee.com/yxx_xxy/Images/raw/master/bigData_Nosql/image-20221114223153866.png" alt="image-20221114223153866"></p><h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h2><p>如上图所示，MongoDB 的安装目录下的==mongo.conf==文件是 MongoDB 的配置 文件。  </p><p>数据库路径  </p><p>​    dbpath=D:\mongodb\data\ </p><p>日志输出文件路径  </p><p>​    logpath=D:\mongodb\log\mongo.log  </p><p>错误日志采用追加模式  </p><p>​    logappend=true </p><p>启用日志文件，默认启用  </p><p>​    journal=true  </p><p>这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为 false  </p><p>​    quiet=true  </p><p>端口号 默认为 27017  </p><p>​    port=27017  </p><h2 id="3-服务"><a href="#3-服务" class="headerlink" title="3. 服务"></a>3. 服务</h2><p> 启动 MongoDB 服务器可以使用–dbpath 参数指定数据文件的存储路径。 </p><p>启动服务  </p><p>​    mongod  </p><p>启动服务，并且指定数据文件存放路径  </p><p>​    mongod –dbpath D:\mongodb\data  </p><p>必须验证，先创建用户  </p><p>​    mongod –auth –port 27017 –dbpath D:\mongodb\data  </p><p>在 windows 中可以将 mongod 安装为服务，然后可以配置自动启动。  安装程序将调用如下命令安装 MongoDB 服务  </p><p>安装服务  </p><p>​    mongod –config “../mongo.conf” –install –serviceName “MongoDB”    </p><p> 启动服务  </p><p>​    net start mongodb  </p><p>停止服务  </p><p>​    net stop mongodb  </p><p>删除服务  </p><p>​    mongod –remove –serviceName “MongoDB”  </p><p>客户端图形界面 Compass 可安装也可不安装：打钩安装或不打钩不安装。  </p><p>也可安装 MongoDB 服务器完毕后，单独安装客户端图形界面 Compass。  </p><p>还可考虑安装第三方客户端导航猫 NaviCat。</p><h2 id="4-连接-MongoDB-服务器"><a href="#4-连接-MongoDB-服务器" class="headerlink" title="4. 连接 MongoDB 服务器"></a>4. 连接 MongoDB 服务器</h2><p>可以通过 MongoDB 自带的客户端 mongo shell 来连接 MongoDB 服务器。 </p><p>默认 host:localhost 端口:27017  </p><p>​    ==mongo==  </p><h2 id="5-常用命令"><a href="#5-常用命令" class="headerlink" title="5. 常用命令"></a>5. 常用命令</h2><p>查看数据库列表  </p><p>​    show dbs  </p><p>选择数据库，格式：use 数据库名  </p><p>​    use employee  </p><p>查看数据库中的集合(表)列表  </p><p>​    show tables  </p><p>​    show collections  </p><p>创建集合(表)  </p><p>​    db.createCollection(“teacher”) </p><p>删除集合  </p><p>​    db.collection-name.drop()  </p><p>向数据库的集合中添加数据  </p><p>​    db.collection-name.insert()  </p><p>查找集合中的数据  </p><p>​    db.collection-name.find()  </p><p>限制查找数据的数量，可以使用 limit 函数  </p><p>​    db.collection-name.find().limit(num)  </p><p>跳过指定的数据，可以使用 skip 函数  </p><p>​    db.collection-name.find().skip(num)  </p><p>获得查找的数据的长度，可以使用 count 函数  </p><p>​    db.collection-name.find().count()  </p><p>查找集合中的一个数据  </p><p>​    db.collection-name.findOne()  </p><p>删除集合中的数据  </p><p>​    db.collection-name.remove()  </p><p>删除 name=value 的第 1 条数据  </p><p>​    db.collection-name.remove({name:’value’},1)  </p><p>更新 name=value 的第 1 个数据为 update-value  </p><p>​    db.collection-name.update({name:’value’},{$set:{name:’update-value’}})  </p><p>更新所有 name=value 的数据为 update-value  </p><p>​    db.collection-name.update({name:’value’}, {$set:{name:’update-value’}},  {multi:true})</p><h2 id="6-通过-Java-驱动连接"><a href="#6-通过-Java-驱动连接" class="headerlink" title="6. 通过 Java 驱动连接"></a>6. 通过 Java 驱动连接</h2><p>// 使用用户 admin 使用密码 123456 连接到本地的 MongoDB 服务上  </p><p>MongoClient mongoClient =  MongoClients.create(“mongodb://admin:123456@localhost/“);  </p><p>//使用用户 admin 使用密码 123456 连接到本地的 MongoDB 服务的 test 库 上  </p><p>mongoClient =  MongoClients.create(“mongodb://admin:123456@localhost/test”);  </p><p>// 默认 27017 端口 </p><p>mongoClient = MongoClients.create(“mongodb://localhost”);  mongoClient = MongoClients.create(“mongodb://fred:foobar@localhost”); </p><p> // </p><p> mongoClient =  MongoClients.create(“mongodb://example1.com:27017,example2.com:27017”);  </p><p>mongoClient =  MongoClients.create(“mongodb://localhost,localhost:27018,localhost:27019”); </p><p> // 连接 replica set 三台服务器, 写入操作应用在主服务器 并且分布查询到从 服务器  </p><p>mongoClient =  MongoClients.create(“mongodb://host1,host2,host3/?slaveOk=true”); </p><p> // 直接连接第一个服务器，无论是 replica set 一部分或者主服务器或者从服务器  </p><p>mongoClient =  MongoClients.create(“mongodb://host1,host2,host3/?connect=direct;slaveOk=true”);  </p><p>// 以安全模式连接到 replica set，并且等待至少两个复制服务器成功写入，超时时间设置为 2 秒  </p><p>mongoClient =  MongoClients.create(“mongodb://host1,host2,host3/?safe=true;w=2;wtimeoutM S=2000”);  </p><p>除了直接使用 MongoDB 驱动的方式，还可以使用 spring-data-mongodb 的： Repository 和 MongoTemplate 方式，相对来说提供了更稳定的抽象层，更方便 使用和维护。 </p><h2 id="7-用户与密码"><a href="#7-用户与密码" class="headerlink" title="7. 用户与密码"></a>7. 用户与密码</h2><p>MongoDB 默认没有设置用户名密码，需要我们自己设置。简单来说首先设置一 个管理所有用户角色的用户 admin，然后根据需要为此用户添加其他角色即可  </p><p>提示输入方式，4.2.0 版本之后  </p><p>use admin  </p><p>db.createUser(  </p><p>{  </p><p>user: “myUserAdmin”,  </p><p>pwd: passwordPrompt(),  </p><p>roles: [ { role: “userAdminAnyDatabase”, db: “admin” }, “readWriteAnyDatabase” ]  </p><p>}  </p><p>)  </p><p>明文方式  </p><p>use admin  </p><p>db.createUser(  </p><p>{  </p><p>user: “adminUser”,  </p><p>pwd: “123456”,  </p><p>roles: [ { role: “userAdminAnyDatabase”, db: “admin” } ]  </p><p>}  </p><p>)  </p><p>授权 auth 之前，必须先 use 到指定数据库  </p><p>use admin  </p><p>db.auth(“myUserAdmin”, “abc123”)  </p><p>use test  </p><p>db.createUser(  </p><p>{  </p><p>user: “myTester”,  </p><p>pwd: passwordPrompt(),  </p><p>roles: [ { role: “readWrite”, db: “test” },{ role: “read”, db: “reporting” } ] </p><p>}  </p><p>)  </p><h2 id="8-内建角色"><a href="#8-内建角色" class="headerlink" title="8. 内建角色"></a>8. 内建角色</h2><p>角色 含义  </p><p>root 只在 admin 数据库中可用，超级账号，超级权限  </p><p>Read 允许用户读取指定数据库  </p><p>dbAdmin 允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统 计或访问 system.profile  </p><p>readWrite 允许用户读写指定数据库  </p><p>userAdmin 允许用户向 system.users 集合写入，可以在指定数据库里创建、删除 和管理用户  </p><p>clusterAdmin 只在 admin 数据库中可用，赋予用户所有分片和复制集相关函数的管理权限 </p><p>readAnyDatabase 只在 admin 数据库中可用，赋予用户所有数据库的读权限  </p><p>dbAdminAnyDatabase 只在 admin 数据库中可用，赋予用户所有数据库的 dbAdmin 权限  </p><p>readWriteAnyDatabase 只在 admin 数据库中可用，赋予用户所有数据库的读写 权限  </p><p>userAdminAnyDatabase 只在 admin 数据库中可用，赋予用户所有数据库的 userAdmin 权限  </p><h2 id="9-MongoDB-优缺点"><a href="#9-MongoDB-优缺点" class="headerlink" title="9. MongoDB 优缺点"></a>9. MongoDB 优缺点</h2><p>内置 GridFS 支持大容量的存储  </p><p>海量数据下性能优越  </p><p>可以高效存储二进制大对象  </p><p>支持自动故障恢复  </p><p>自动分片支持云级扩展性，分片简单  </p><p>MapReduce 支持复杂聚合  </p><p>不支持事务操作  </p><p>占用磁盘空间比较大  </p><p>无法进行关联表查询，不适用于关联关系多的业务  </p><p>复杂聚合操作通过 MapReduce 实现速度较慢 </p>]]></content>
      
      
      
        <tags>
            
            <tag> Nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的markdown笔记</title>
      <link href="/2022/09/12/wo-de-markdown-bi-ji/"/>
      <url>/2022/09/12/wo-de-markdown-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nosql</title>
      <link href="/2022/09/06/nosql-xue-xi-zhi-lu/"/>
      <url>/2022/09/06/nosql-xue-xi-zhi-lu/</url>
      
        <content type="html"><![CDATA[<p>这学期开始学习Nosql数据库，我会在这里记录我的学习过程，希望能监督自己。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nosql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用电脑出现的问题</title>
      <link href="/2022/09/06/wei-xiu-dian-nao-wen-ti/"/>
      <url>/2022/09/06/wei-xiu-dian-nao-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="1、无意中撤销了桌面的新建文件夹导致丢失里面的文件"><a href="#1、无意中撤销了桌面的新建文件夹导致丢失里面的文件" class="headerlink" title="1、无意中撤销了桌面的新建文件夹导致丢失里面的文件"></a>1、无意中撤销了桌面的新建文件夹导致丢失里面的文件</h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>血的教训啊，以前不会注意到的，昨天做完一个实验，于是就把实验完的文档放入一个新建的文件夹里。但是，我接下来按了一个crtl+Z键取消了。对的，文件不见了了，我再crtl+Y时返回给我的是一个空的文件夹，里面的实验文档已经没有了！！！出现这种情况回收站也找不回来的！</p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><ol><li><p>【来自百度网友，这个我没有尝试过】</p><p>按ctrl+r.还原。前提是，你没有做多余的别的复制粘贴什么操作。<br>如果按了ctrl+z后，立马按ctrl+r.还原，还有救。</p></li><li><p>使用腾讯电脑管家、360（应该还有其他的软件），里面的工具的“文档管理”，有一个“文件误删”，恢复就好。【<strong>前提是在误删前电脑已经安装了这些软件，如果是误删后再安装是没有用的</strong>】</p></li><li><p>淘宝搜索数据恢复，如果文件对你很重要，重做会很复杂的话，可以考虑淘宝付费让一些技术人员帮你弄。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 使用与维护电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑使用与维修 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程遇到的问题及解决|</title>
      <link href="/2022/09/06/bian-cheng-yu-dao-de-wen-ti-jie-jue/"/>
      <url>/2022/09/06/bian-cheng-yu-dao-de-wen-ti-jie-jue/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="hexo无法显示图片"><a href="#hexo无法显示图片" class="headerlink" title="hexo无法显示图片"></a>hexo无法显示图片</h2><ol><li><p>检查图床照片链接，发现没有问题。</p></li><li><p>用Chrome打开图片位置检查，发现发生403错误，如下图。</p><p>403说明这个网络资源这样获取是被拒绝的。</p><p><img src="C:/Users/%E5%85%AE%E5%AD%90/AppData/Roaming/Typora/typora-user-images/image-20221114221859820.png" alt="image-20221114221859820"></p><ul><li>解决方法：</li></ul><p>只需要在markdown文章开头添加</p><meta name="referrer" content="no-referrer" /></li></ol><p>​                最后重新上传到博客图片就可以正常显示了。</p>]]></content>
      
      
      <categories>
          
          <category> BUG </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 遇见bug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端Web应用开发|基础篇</title>
      <link href="/2022/09/06/qian-duan-web-ying-yong-kai-fa-ji-chu-pian/"/>
      <url>/2022/09/06/qian-duan-web-ying-yong-kai-fa-ji-chu-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><h2 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好呀！<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h2 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h2>]]></content>
      
      
      <categories>
          
          <category> Web前端应用开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/16/hello-world/"/>
      <url>/2022/04/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
